#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::File       qw/curfile path/;
use Mojo::Collection qw/c/;
use Mojo::JSON       qw/encode_json/;

use lib curfile->sibling('lib')->to_string;

use Leafpad;

app->home( Leafpad->home );

app->static->paths->[0] = app->home->child('public');
app->renderer->paths->[0] = app->home->child('templates');

my $data_dir = path($ENV{LEAFPAD_DATA} // ($ENV{HOME} . '/leafpad-data'));

my $default_zoom = 5;
my $default_lat  = 37.09;
my $default_lon  = -96.7;

app->defaults(zoom => $default_zoom, layout => 'default' );

# These values can be set in leafpad.conf
plugin Config => default => {
  local_update_handler => 'leafpad-update',
  global_update_handler => do { my $x = `which leafpad-update`; chomp $x; $x },
  source_base => "$ENV{HOME}/sql",
  src_dir => $data_dir
};

app->helper(update_handler => sub ($c, $project, $dataset) {
  my $handler;
  my $src_dir = app->config->{src_dir};
  my $local_handler = app->config->{local_update_handler};
  my $global_handler = app->config->{global_update_handler};
  if (-d $src_dir && -x "$src_dir/$project/$dataset") {
    $handler = "$src_dir/$project/$dataset";
  } elsif (-x "$src_dir/$project/$local_handler") {
    $handler = "$src_dir/$project/$local_handler";
  } elsif (-x "$global_handler") {
    $handler = $global_handler;
  }
  $handler;
});

package Geofile {
  use Mojo::Base qw/-base -signatures/;
  use Mojo::File qw/path/;
  use Text::CSV_XS qw/csv/;

  has 'geodata';
  has 'header';
  has 'filename';
  has 'rel_path';

  sub name($self) {
    path($self->filename)->basename('.csv');
  }

  sub ingest($self, $name) {
    my ($header, $data) = read_file($name);
    $self->new(header => $header, geodata => $data, filename => $name, rel_path => path($name)->to_rel($data_dir));
  }

  sub read_file($name) {
   my %seen;
   my @header;
   my $data = csv(in => $name,
                  auto_diag => 9,
                  diag_verbose => 1,
                  headers => sub {
                   my $nxt = ( $seen{$_[0]}++ ? $_[0] . '-' . $seen{$_[0]} : $_[0] );
                   push @header, $nxt;
                   $nxt;
                 });
   (\@header, $data);
  }
}

app->helper(set_defaults => sub($c) {
  $c->stash(zoom      => $c->param('zoom') || $default_zoom);
  $c->stash(lat       => $c->param('lat')  || $default_lat);
  $c->stash(lon       => $c->param('lon')  || $default_lon);
  $c->stash(geofiles  => []);
  $c->stash(csv_files => []);
});

get '/' => { layout => 'bare' } => sub($c) {
  unless (-d app->renderer->paths->[0]) {
    print "template dir not found: " . app->renderer->paths->[0];
  }
  $c->set_defaults;
  $c->stash(csv_files => $data_dir
        ->list({dir => 1})
        ->grep(sub { /\.csv$/ || -d "$_" })
        ->sort(sub { $b->stat->atime <=> $a->stat->atime } ) );
} => 'index';

get '/show/csv/*name' => sub($c) {
  $c->set_defaults;
  my $name = $c->stash('name');
  my $project;
  if ($name =~ m{^([^/]+)/(.*)$}) {
    $project = $1;
  } else {
    $project = $name;
  }
  $c->stash('project' => $project);
  my $io   = $data_dir->child("$name");
  if (-d $io) {
    $c->stash(geofiles =>
        $io->list->grep(sub { /\.csv$/ })->map(sub { Geofile->ingest("$_") }));
  } else {
    $c->stash(geofiles => [Geofile->ingest("$io.csv")]);
  }
  if ($c->param('gl')) {
    $c->stash(layout => 'gl');
    return $c->render(template => 'showgl');
  }
  $c->render(template => 'show');
} => 'show';

get 'datasets/*name/data.js' => { format => 'js', layout => '' } => sub($c) {
  my $name = $c->stash('name');
  my $io = $data_dir->child($name);
  if (-d $io) {
    $c->stash(geofiles => $io->list->grep(sub { /\.csv$/ })->map(sub { Geofile->ingest("$_") }));
    if (-e $io->child("config.js") ) {
      $c->stash(leafpad_config => $io->child('config.js')->slurp)
    }
  } else {
    $c->stash(geofiles => [Geofile->ingest("$io.csv")]);
  }

  $c->render('datasets', format => 'js');
} => 'datasets';

get 'dataset/*name/data.js' => { format => 'js' } => sub($c) {
  my $name = $c->stash('name');
  my $io = $data_dir->child($name);
  $c->stash(geofile => Geofile->ingest("$io.csv"));
  $c->render('dataset', format => 'js');
} => 'dataset';

get 'csv/:proj/*name' => sub ($c) {
  my $io = $data_dir->child($c->stash('proj'))->child($c->stash('name'). '.csv');
  $c->render( text => $io->slurp, format => 'txt' );
} => 'csv';

post 'refresh' => sub ($c) {
  my $data = $c->req->json;
  my ($lat,$lon,$project,$dataset,$params) = @$data{qw/lat lon project dataset params/};
  $data->{output_to} = $data_dir->child($project)->child($dataset) . '.csv';
  $data->{params} = $params;
  my $json = encode_json($data);
  # we expect the keys: lat, lon, project, dataset, bounds
  my $handler = $c->update_handler($project,$dataset) or
    return $c->render( text => "no handler found for $project/$dataset" );
  $c->inactivity_timeout(300);
  my $sub = Mojo::IOLoop->subprocess;
  $c->res->headers->content_type('text/plain');
  $c->write("Running $handler '$json'\n");
  $sub->on( progress => sub ($subp, $data) { $c->write($data) if $c->tx; });
  $sub->run_p(sub($subp) {
    $c->app->log->debug("running $handler '$json'");
    open(my $fh, '-|', "$handler",$json) or return $c->render( text => "error starting $handler: $!" );
    while (<$fh>) { $subp->progress("$_"); }
    close $fh;
  })->then(sub($res) {
    $c->app->log->debug("succesfully ran $handler");
    $c->finish('-- finished --');
  })->catch(sub($err) {
    $c->app->log->error("exec failed: $err");
    $c->finish("errors: $err");
  });
} => 'refresh';

get 'source/:name' => sub ($c) {
  my $name = $c->stash('name');
  my $base = path($c->config->{source_base});
  if (-e $base->child("$name.sql")  ) {
    $c->stash( filename => "$name.sql" );
    $c->render(source_text => $base->child("$name.sql")->slurp);
  } elsif (-e $base->child("remote/$name.sql") ) {
    $c->stash( filename => "remote/$name.sql" );
    $c->render(source_text => $base->child("remote/$name.sql")->slurp);
  } else {
    $c->render(text => "file not found: $name");
  }
} => 'source';

app->start;
