#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::File qw/path/;
use Text::CSV_XS qw/csv/;
use Mojo::Collection qw/c/;

#
# 1. add a csv file to data/
#    One column should be "geojson".
#    Other columns can be whatever
# 2. go to /show/csv/filename
# 3. done!
#

my $data_dir = app->home->child('data');

my $default_zoom = 5;
my $default_lat = 37.09;
my $default_lon = -96.7;

app->defaults(zoom => $default_zoom);

any '/' => sub ($c) {
  my $lat = $c->param('lat') || $default_lat;
  my $lon = $c->param('lon') || $default_lon;
  $c->stash(zoom => $c->param('zoom')) if $c->param('zoom');
  my $geojson = $c->param('geojson') // '{}';
  my @geodata = split /\n/, $geojson;
  unless ($geodata[1] && $geodata[1] =~ /^{/) {
    @geodata = ($geojson);
  }
  $c->stash(lat => $lat);
  $c->stash(lon => $lon);
  my $send = [ map +{ geojson => $_, label => 'shape' }, @geodata ];
  $c->stash( geodata => $send );
  $c->stash( csv_files => [ $data_dir->list->grep(sub { /.csv/ })->sort->each ]);
  $c->stash( csv_data => [] );
  $c->stash( csv_cols => [] );
  $c->render(template => 'index');
} => 'index';

get '/show/csv/:name/:line' => { line => 0 } => sub ($c) {
  my %seen; # uniqify names
  my $name = $c->param('name');
  my $line = $c->param('line');
  $c->stash(zoom => $c->param('zoom') || $default_zoom);
  $c->stash( csv_files => [ ] );

  my $csv = Text::CSV_XS->new();
  my $file = $data_dir->child("$name.csv");
  open my $fh, "<", "$file" or die "$!";
  my @header = $csv->header($fh, { munge_column_names => sub { $seen{$_[0]}++ ? $_[0] . '-' . $seen{$_[0]} : $_[0] }});
  $csv->parse("$file") or die $!;
  my $data = $csv->getline_hr_all($fh);
  close $fh;
  $c->stash(csv_data => $data);
  $c->stash(csv_cols => \@header);
  if ($line) {
    $data = [ $data->[$line + 1] ];
  }
  $c->stash(geodata => $data);
  my $lat = $c->param('lat') || $data->[0]{latitude} || $data->[0]{lat} || $default_lat;
  my $lon = $c->param('lon') || $data->[0]{longitude} || $data->[0]{lon} || $default_lon;
  if ($c->param('lat') or !$data->[0]{latitude}) {
    $c->stash(marker_label => "you are here");
  } else {
    $c->stash(marker_label => "row 1: $lat, $lon");
  }
  $c->stash(lat => $lat);
  $c->stash(lon => $lon);
  $c->render(template => 'index');
} => 'show';

app->start;
__DATA__

@@ index.html.ep
% use Mojo::Collection qw/c/;
% layout 'default';
% title 'leafpad';

<h3>
%= link_to 'leafpad' => 'index'
</h3>

<div class="csv_files">
% for my $file (@$csv_files) {
  %= link_to url_for('show', { name => $file->basename('.csv') }) => begin
    %= $file->basename('.csv')
  %= end
% }
</div>

<div class='controls'>
  <div id='current_link'>
  Press <i>l</i> to generate a link to the current zoom+location
  </div>
  <div class='current_pos'>
    <span id='lat'></span>, <span id='lon'></span>
  </div>
</div>

<div id='details'>...</div>

<div id="map"></div>

<div id='csv_data'>
<table class='csv_data'>
<tr>
  % for my $col (@$csv_cols) {
  <th><%= $col %></th>
  % }
</tr>
% my $row_index = 0;
% for my $row (@$csv_data) {
<tr>
  % for my $col (@$csv_cols) {
    <td><div class='csv_cell' data-csv_col="<%= $col %>" data-csv_row="<%= $row_index %>"><%= $row->{$col} %></div></td>
  % }
  % $row_index++;
</tr>
% }
</table>
% 

</div>

<style>
  #map { height: 70vh; }
</style>
%= javascript begin

var higlight = {
    "fillColor": "#aa0000",
    "color": "#000000",
    "weight" :  4,
    "opacity": 1
};

var geostyle = {
    "fillColor": "#ccfaa0",
    "fillOpacity" : 0.1,
    "color": "#000000",
    "weight": 1,
    "radius": 3,
    "opacity": 0.9
};

var markerstyle = {
  radius: 5,
  weight: 1,
  fillOpacity: 0.8,
  fillColor: "#aacc00",
  color: "#000000"
};

function generate_link() {
  let el = document.getElementById('current_link');
  let base = '<%= url_for->to_abs %>';
  let latlng = map.getCenter()
  let link = `${base}?lat=${latlng.lat}&lon=${latlng.lng}&zoom=${map.getZoom()}`
  el.innerHTML = `<a href=${link}>${link}</a>`
}

const keylistener = (event) => {
  if (event.ctrlKey || event.altKey || event.metaKey || event.shiftKey) {
    return
  }
  const keyName = event.key;
  if (keyName === 'l') { generate_link() }
}

var map = L.map('map').setView([<%= $lat %>, <%= $lon %>], <%= $zoom =%>);
map.addEventListener('mousemove', (event) => {
  let lat = Math.round(event.latlng.lat * 10000000) / 10000000;
  let lng = Math.round(event.latlng.lng * 10000000) / 10000000;
  document.getElementById('lat').innerHTML = `${lat}`
  document.getElementById('lon').innerHTML = `${lng}`
});
map.doubleClickZoom.disable();
L.tileLayer.provider('CartoDB.Positron').addTo(map);
L.control.scale().addTo(map);

var geolayer;
var all_layers = {}
% my $csv_row = 0;
% for (@$geodata) {
  all_layers['<%= $csv_row %>'] = {}
  % for my $col (keys %$_) {
     % next unless $col =~ /geojson/;
     % my $geo = $_->{$col} or next;
     % if ( $geo =~ /Feature/ ) {
       geolayer = L.geoJSON( <%== $_->{$col} %>, { style: geostyle } )
     % } else {
       geolayer = L.geoJSON({
               "type": "Feature",
               "interactive" : false,
                "style" : { color: "black" },
                "geometry" : <%== $_->{$col} %>
           }, { style: geostyle, pointToLayer: function (f,latlng) { return L.circleMarker(latlng,geostyle) } })
     % }
     geolayer.on('mouseover', function() { console.log('mouse over <%= $_->{label} %>'); this.setStyle(higlight);
       let j = <%== Mojo::JSON::encode_json($_) =%>;
       document.getElementById('details').innerHTML = make_details(j);
       })
     geolayer.on('mouseout', function() { console.log('mouse out <%= $_->{label} %>'); this.resetStyle() })
     geolayer.on('click', function() {
       console.log('mouse click');
       this.resetStyle();
       this.bringToBack();
     })
     all_layers['<%= $csv_row %>']['<%= $col %>'] = geolayer;
     geolayer.csv_row = '<%= $csv_row %>'
     geolayer.csv_col = '<%= $col %>'
     geolayer.addTo(map);
   % $csv_row++;
   % }
% }

% for (@$geodata) {
  % my $lat = $_->{lat} || $_->{latitude} or next;
  % my $lon = $_->{lon} || $_->{longitude} or next;
  j = <%== Mojo::JSON::encode_json($_) =%>;
  L.circleMarker([<%= $lat %>, <%= $lon %>], markerstyle).addTo(map).bindPopup(make_details(j), {maxWidth: "auto"})
% }

function make_details(j) {
 let out = '<table>'
 for (let k of Object.keys(j)) {
  if (k.match(/geojson$/)) {
    continue;
  }
  out += "<tr><td>" + k +  "</td><td>"
  if (j[k].length > 50) {
     out += j[k].substr(0,50) + '...'
     console.log(`${k} is`,j[k])
  } else {
     out += j[k]
  }
  out += "</td></tr>"
 }
 out += "</table>"
 return out
}

let last_cell = null
function csvlistener(e) {
  let cell = e.target
  let layer = all_layers[cell.dataset.csv_row][cell.dataset.csv_col]
  if (!layer) {
    return
  }
  if (last_cell) {
    last_cell.style.backgroundColor = 'white'
  }
  cell.style.backgroundColor = '#ddddff'
  last_cell = cell
  map.flyToBounds(layer)
}

window.onload = () => {
  document.addEventListener('keydown', keylistener)
  document.getElementById('csv_data').addEventListener('click', csvlistener);
}

%= end

@@ style.css
table.csv_data tr td div.csv_cell {
}
#details {
  border: 1px solid grey;
  padding: 2px;
  margin: 4px;
  box-shadow: 1px 2px 4px #888888;
  position:absolute;
  top:0;
  right:0;
  background-color:white;
}
#map {
  border:1px solid #888;
  cursor:crosshair;
}
table {
  border-collapse: collapse;
  border-color: #ddd;
}
td {
  border: 1px solid #ddd;
}
div.controls {
  position:relative;
}
div.current_pos {
  position:absolute;
  top:0px;
  right:2px;
}
div.geoform {
  display:grid;
  border: 1px solid #ddd;
  padding:4px;
  grid-template-columns: 1fr 1fr;
}
div.selector {
  display:grid;
  grid-template-columns: 1fr 3fr;
}
div.triple {
  display:grid;
  grid-template-columns: 3rem 10rem 1rem;
  column-gap: 1rem;
}
.wide {
  width:20rem;
}
div.csv_files a {
  border:1px solid #99aa99;
  display:inline-block;
  margin-left:1px;
  margin-bottom:1px;
  padding-left:1px;
  padding-right:1px;
  whitespace:no-break;
  background-color:#ddffdd;
  text-decoration:none;
  color:black;
}
a {
  text-decoration:none;
  color:#004400;
}

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
<head>
 <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
   integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
   crossorigin=""/>
 <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
   integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
   crossorigin=""></script>
  <script src="https://unpkg.com/leaflet-providers@1.13.0/leaflet-providers.js"></script>
  <title><%= title %></title>
  %= stylesheet '/style.css'
</head>
  <body><%= content %></body>
</html>
