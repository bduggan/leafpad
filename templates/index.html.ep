% use Mojo::Collection qw/c/;
% layout 'default';
% title 'leafpad';

<h3>
%= link_to 'leafpad' => 'index'
</h3>

<div class="csv_files">
  % for my $file (@$csv_files) {
    %= link_to url_for('show', { name => $file->basename('.csv') }) => begin
      %= $file->basename('.csv')
    %= end
  % }
</div>

<div class='controls'>
  <div id='current_link'>
  Press <i>l</i> to generate a link to the current zoom+location
  </div>
  <div class='current_pos' title='latitude,longitude' alt='latitude,longitude'>
    <span id='lat'></span>, <span id='lon'></span>
  </div>
</div>

<div id='details'>...</div>

<div class='panels'>
  <div id="map"></div>
  <div id='csv_data'>
    <div id='tabs'>
      % for my $file (@$geofiles) {
        <div id='<%= $file->name %>'><%= $file->name %></div>
      % }
    </div>
    <div id='csv_tables'>
    % for my $file (@$geofiles) {
      <table class='csv_data' id='table_<%= $file->name %>'>
        <caption><b><%= $file->name %></b></caption>
        <tr>
          % for my $col (@{ $file->header }) {
          <th><%= $col %></th>
          % }
        </tr>
        % my $row_index = 0;
        % for my $row (@{ $file->geodata }) {
          <tr>
            % for my $col (@{ $file->header }) {
              <td>
                <div class='csv_cell'
                     data-csv_file="<%= $file->name %>"
                     data-csv_col="<%= $col %>"
                     data-csv_row="<%= $row_index %>"><%= $row->{$col} %></div>
                </td>
            % }
            % $row_index++;
          </tr>
        % }
      </table>
    % }
    </div>
  </div>
</div>

<style>
  #map { }
</style>
%= javascript begin

var highlight = {
    "fillColor": "#000000",
    "color": "#ff8c00",
    "weight" : 5,
    "opacity": 0.9
};

var geostyle = {
    "fillColor": "#ccfaa0",
    "fillOpacity" : 0.05,
    "color": "#552255",
    "weight": 1,
    "radius": 3,
    "opacity": 0.9
};

var markerstyle = {
  radius: 5,
  weight: 1,
  fillOpacity: 0.8,
  fillColor: "#aacc00",
  color: "#000000"
};

function generate_link() {
  let el = document.getElementById('current_link');
  let base = '<%= url_for->to_abs %>';
  let latlng = map.getCenter()
  let link = `${base}?lat=${latlng.lat}&lon=${latlng.lng}&zoom=${map.getZoom()}`
  el.innerHTML = `<a href=${link}>${link}</a>`
}

var map = L.map('map').setView([<%= $lat %>, <%= $lon %>], <%= $zoom =%>);
map.doubleClickZoom.disable();
L.tileLayer.provider('CartoDB.Positron').addTo(map);
L.control.scale().addTo(map);

let highlighted = null;
var geolayer;
var all_layers = {}
% for my $file (@{ $geofiles }) {
  all_layers['<%= $file->name %>'] = {}
  % my $geodata = $file->geodata;
  % my $csv_row = 0;
  % for (@$geodata) {
    all_layers['<%= $file->name %>']['<%= $csv_row %>'] = {}
    % for my $col (keys %$_) {
       % next unless $col =~ /geojson/;
       % my $geo = $_->{$col} or next;
       % if ( $geo =~ /Feature/ ) {
         geolayer = L.geoJSON( <%== $_->{$col} %>, { style: geostyle } )
       % } else {
         geolayer = L.geoJSON({
                 "type": "Feature",
                 "interactive" : false,
                  "style" : { color: "black" },
                  "geometry" : <%== $_->{$col} %>
             }, { style: geostyle, pointToLayer: function (f,latlng) { return L.circleMarker(latlng,geostyle) } })
       % }
       geolayer.on('mouseover', function() {
         highlighted = this; this.setStyle(highlight);
         let j = <%== b(Mojo::JSON::encode_json($_))->decode =%>;
         document.getElementById('details').innerHTML = make_details(j);
       })
       geolayer.on('mouseout', function() { this.resetStyle() })
       geolayer.on('click', function() { this.resetStyle(); this.bringToBack(); })
       all_layers['<%= $file->name %>']['<%= $csv_row %>']['<%= $col %>'] = geolayer;
       geolayer.csv_row = '<%= $csv_row %>'
       geolayer.csv_col = '<%= $col %>'
       geolayer.csv_file = '<%= $file->name %>'
       geolayer.addTo(map);
     % }
     % $csv_row++;
  % }

  % for (@$geodata) {
    % my $lat = $_->{lat} || $_->{latitude} or next;
    % my $lon = $_->{lon} || $_->{longitude} or next;
    j = <%== Mojo::JSON::encode_json($_) =%>;
    L.circleMarker([<%= $lat %>, <%= $lon %>], markerstyle).addTo(map).bindPopup(make_details(j), {maxWidth: "auto"})
  % }
% }

function make_details(j) {
 let out = '<table>'
 for (let k of Object.keys(j)) {
  if (k.match(/geojson$/)) {
    continue;
  }
  out += "<tr><td>" + k +  "</td><td>"
  if (j[k].length > 50) {
     out += j[k].substr(0,50) + '...'
     console.log(`${k} is`,j[k])
  } else {
     out += j[k]
  }
  out += "</td></tr>"
 }
 out += "</table>"
 return out
}

const mouselistener = (event) => {
  document.getElementById('lat').innerHTML = Math.round(event.latlng.lat * 10000000) / 10000000;
  document.getElementById('lon').innerHTML = Math.round(event.latlng.lng * 10000000) / 10000000;
}

const keylistener = (event) => {
  if (event.ctrlKey || event.altKey || event.metaKey || event.shiftKey)
    return
  const keyName = event.key;
  if (keyName === 'l')
    generate_link()
}

let last_cell = null
const csvlistener = (e) => {
  let cell = e.target
  let data = cell.dataset
  let file = data.csv_file
  if (!file) return
  let layer = all_layers[file][data.csv_row][data.csv_col]
  if (!layer) return

  map.flyToBounds(layer, { maxZoom: 17 })

  if (last_cell)    last_cell.style.backgroundColor = 'white'
  if (highlighted)  highlighted.resetStyle() 
  cell.style.backgroundColor = '#ddddff'
  last_cell                  = cell
  highlighted                = layer
  layer.setStyle(highlight)
}

const tablistener = (e) => {
  let table_to_show = `table_${e.target.id}`
  let tab_to_show   = e.target.id
  for (let c of document.querySelector('#csv_tables').children) {
    c.style.display = c.id == table_to_show ? 'block' : 'none'
  }
  for (let c of document.querySelector('#tabs').children) {
    c.style.backgroundColor = c.id == tab_to_show ? '#00bb00' : 'white'
    c.style.color           = c.id == tab_to_show ? 'white' : 'black'
  }
}

window.onload = () => {
  document.addEventListener('keydown', keylistener)
  document.getElementById('csv_data').addEventListener('click', csvlistener);
  document.getElementById('tabs').addEventListener('click', tablistener);
  map.addEventListener('mousemove', mouselistener)
}

%= end

